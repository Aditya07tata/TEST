using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class ActualAnaplanDashboard : System.Web.UI.Page
{
    public DataSet ds = new DataSet();
    List<string> areaList = new List<string>();
    List<string> processNameList = new List<string>();

    protected void Page_Init(object sender, EventArgs e)
    {
        string vUserID = "";
        try
        {
            if (!IsPostBack)
            {
                List<string> authUsersLst = new List<string>();

                string authPath = @"\\144.0.16.11\Input\ActualAnaplan\Authorization.txt";

                if (File.Exists(authPath))
                {
                    string[] auths = File.ReadAllLines(authPath);

                    authUsersLst = auths.ToList<string>();
                    string[] arrUser;
                    vUserID = HttpContext.Current.Request.LogonUserIdentity.Name;
                    //vUserID = "TATASTEEL\\163667";
                    if (!string.IsNullOrEmpty(vUserID))
                    {
                        if (vUserID.Contains("\\"))
                        {
                            arrUser = vUserID.Split('\\');
                            if (arrUser.Length > 0)
                                vUserID = arrUser[1].ToString();

                            KeyValuePair<string, string> authorization = new KeyValuePair<string, string>();
                            authorization = CheckUserAuth(vUserID, authUsersLst);
                            Session["IsAuth"] = authorization.Key;
                            Session["CurrentUser"] = authorization.Value;

                            if (Session["IsAuth"].ToString() == "Y")
                            {
                                lblPno.Text = Session["CurrentUser"].ToString();
                                lblName.Text = Session["CurrentUserName"].ToString();
                                lblEmailId.Text = Session["CurrentUserEmailId"].ToString();
                            }
                            else
                            {
                                Response.Redirect("UnAuthorization.aspx");
                                Session["CurrentUser"] = null;
                                Session["CurrentUserName"] = null;
                                Session["CurrentUserEmailId"] = null;
                            }
                        }
                    }
                }
                //DisplayMenu();
            }
        }
        catch (Exception ex) { }
    }

    private KeyValuePair<string, string> CheckUserAuth(string vUserID, List<string> authUsersLst)
    {
        KeyValuePair<string, string> isAuth = new KeyValuePair<string, string>("N", "");

        try
        {
            string authPath = @"\\144.0.16.11\Input\ActualAnaplan\Authorization.txt";

            if (File.Exists(authPath))
            {
                string ids = File.ReadAllText(authPath);

                if (ids.Contains(vUserID))
                {
                    isAuth = new KeyValuePair<string, string>("Y", vUserID);
                    ids = ids.Replace("\r\n", "");
                    string[] userList = ids.ToString().Split(';');
                    for (var i = 0; i < userList.Length; i++)
                    {
                        if (userList[i].ToString() != "")
                        {
                            string[] userInfo = userList[i].ToString().Split('#');

                            if (userInfo[0].ToString() == vUserID)
                            {
                                Session["CurrentUserName"] = userInfo[1].ToString().Trim();
                                Session["CurrentUserEmailId"] = userInfo[2].ToString().Trim();
                            }
                        }
                    }
                }
                else
                {
                    isAuth = new KeyValuePair<string, string>("N", vUserID);
                }
            }
        }
        catch (Exception ex)
        {

        }
        return isAuth;
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        string filePath = @"\\144.0.16.11\Input\ActualAnaplan\Command\Command.txt";

        if (Page.IsPostBack != true)
        {
            BindDropdown();
            ImportToGrid();
            ToggleMarQuee(File.Exists(filePath));
        }
    }

    private void ToggleMarQuee(bool botrun)
    {
        bool enable = !botrun;
        if (botrun)
        {
            lblMarquee.Text = "A bot is already running, please wait for the final mail.";
            ScriptManager.RegisterStartupScript(this, GetType(), "KeyMarquee", string.Format("displayElement('{0}','{1}');", ".marq__msg", "block"), true);
            btnSave.Enabled = false;
            lnkBtnBotTrigger.Enabled = false;
        }
        else
        {
            lblMarquee.Text = "";
            ScriptManager.RegisterStartupScript(this, GetType(), "KeyMarquee", string.Format("displayElement('{0}','{1}');", ".marq__msg", "none"), true);
            btnSave.Enabled = true;
            lnkBtnBotTrigger.Enabled = true;
        }
    }

    public void ShowGenericMessageModal(string type, string Message)
    {
        ScriptManager.RegisterStartupScript(this, GetType(), "KeyGenericMessageModal", string.Format("showGenericMessageModal('{0}','{1}');", type, Message), true);
    }

    public void BindDropdown()
    {
        try
        {
            string masterListPath = @"\\144.0.16.11\Input\ActualAnaplan\MasterData\MasterAnaplanList.xlsx";

            if (File.Exists(masterListPath))
            {
                var dv = Excel(masterListPath).Tables[0].DefaultView;
                dv.Sort = "Area ASC";

                var dt = dv.ToTable(true, "Area");

                if (dt.Columns.Count > 0)
                {
                    lstBoxArea.DataSource = dt;
                    lstBoxArea.DataValueField = "Area";
                    lstBoxArea.DataTextField = "Area";
                    lstBoxArea.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
            ShowGenericMessageModal(CommonConstants.ALERT_TYPE_ERROR, ex.Message);
        }
    }

    protected void lstBoxArea_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            string masterListPath = @"\\144.0.16.11\Input\ActualAnaplan\MasterData\MasterAnaplanList.xlsx";

            List<string> lstSelectedArea = new List<string>();

            foreach (var index in lstBoxArea.GetSelectedIndices())
            {
                lstSelectedArea.Add(lstBoxArea.Items[index].Value);
            }

            if (File.Exists(masterListPath))
            {
                var dt = Excel(masterListPath).Tables[0].AsEnumerable()
                                    .Where(row => lstSelectedArea.Contains(row.Field<string>("Area"))).CopyToDataTable();

                if (dt.Columns.Count > 0)
                {
                    lstBoxProcessName.DataSource = dt;
                    lstBoxProcessName.DataValueField = "Process Name";
                    lstBoxProcessName.DataTextField = "Process Name";
                    lstBoxProcessName.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    // Bind Gridview
    private void ImportToGrid()
    {
        try
        {
            string anaplanBotPath = @"\\144.0.16.11\Input\ActualAnaplan\Config\AnaplanBots.xlsx";

            if (File.Exists(anaplanBotPath))
            {
                var dt = Excel(anaplanBotPath).Tables[0];

                DataView dv = new DataView(dt);
                dv.RowFilter = "LEN(Area) > 0";
                dt = dv.ToTable();

                if (dt.Columns.Count > 0)
                {
                    grdActualAnaplan.DataSource = dt;
                    grdActualAnaplan.DataBind();
                    grdActualAnaplan.Visible = true;
                }
                else
                {
                    grdActualAnaplan.DataSource = null;
                    grdActualAnaplan.DataBind();
                    grdActualAnaplan.Visible = false;
                }
            }
            else
            {
                ShowGenericMessageModal(CommonConstants.ALERT_TYPE_WARNING, "file does not exist!");
                grdActualAnaplan.DataSource = null;
                grdActualAnaplan.DataBind();
                grdActualAnaplan.Visible = false;
            }
        }
        catch (Exception ex)
        {
            ShowGenericMessage
